#include "RandomGen.glsl"

layout(rg8ui) uniform uimage2D u_STBlueNoiseTex;
layout(rgba8ui) uniform uimage2D u_SortedBlueNoiseTex;

uniform int u_SampleIdx;

const uvec2 GroupSize = ivec2(64, 32); // 32KB at 16 bytes per pixel

void getSortedBlueNoise(ivec2 pos, int frameIdx, int sampleIdx, out vec2 noise, out ivec2 groupPos) {
    pos.x += (sampleIdx & 3) * 128;
    pos.y += (frameIdx & 63) * 128;
    uvec4 data = imageLoad(u_SortedBlueNoiseTex, pos);

    noise = (data.xy + 0.5) / 256.0;
    groupPos = ivec2(data.zw);
}

shared vec2 gs_SampleDirs[GroupSize.x][GroupSize.y];

// https://knarkowicz.wordpress.com/2014/04/16/octahedron-normal-vector-encoding/
// https://johnwhite3d.blogspot.com/2017/10/signed-octahedron-normal-encoding.html
vec2 octWrap( vec2 v ) {
    // return ( 1.0 - abs( v.yx ) ) * ( v.xy >= 0.0 ? 1.0 : -1.0 );
    vec2 tmp = 1.0 - abs(v.yx);
    return mix(-tmp, tmp, greaterThanEqual(v.xy, vec2(0.0)));
}
vec2 octEncodeNormal( vec3 n ) {
    n /= ( abs( n.x ) + abs( n.y ) + abs( n.z ) );
    n.xy = n.z >= 0.0 ? n.xy : octWrap( n.xy );
    n.xy = n.xy * 0.5 + 0.5;
    return n.xy;
}
vec3 octDecodeNormal( vec2 encN ) {
    encN = encN * 2.0 - 1.0;

    vec3 n;
    n.z = 1.0 - abs( encN.x ) - abs( encN.y );
    n.xy = n.z >= 0.0 ? encN.xy : octWrap( encN.xy );
    n = normalize( n );
    return n;
}

layout(local_size_x = GroupSize.x, local_size_y = GroupSize.y) in;
void main() {
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    int frameIdx = int(gl_GlobalInvocationID.z);

    gs_SampleDirs[pos.x][pos.y] = octEncodeNormal(random_dir(frameIdx, u_SampleIdx));
    barrier();

    vec3 dir = octDecodeNormal(gs_SampleDirs[pos.x][pos.y]);


}