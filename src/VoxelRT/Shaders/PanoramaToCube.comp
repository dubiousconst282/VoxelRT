uniform sampler2D u_SourceImage;
layout(r11f_g11f_b10f) uniform imageCube u_DestCube;

const float PI = 3.141592653589793;
const float TAU = 6.283185307179586;

vec3 UnprojectCubemap(vec2 uv, uint faceIdx) {
    float uc = uv.x * 2.0 - 1.0;
    float vc = uv.y * 2.0 - 1.0;

    switch (faceIdx) {
        default:
        case 0: return vec3(+1.0,   vc,  -uc); // POSITIVE X
        case 1: return vec3(-1.0,   vc,   uc); // NEGATIVE X
        case 2: return vec3(  uc, -1.0,   vc); // POSITIVE Y
        case 3: return vec3(  uc, +1.0,  -vc); // NEGATIVE Y
        case 4: return vec3(  uc,   vc, +1.0); // POSITIVE Z
        case 5: return vec3( -uc,   vc, -1.0); // NEGATIVE Z
    }
}

layout(local_size_x = 8, local_size_y = 8) in;
void main() {
    ivec3 pos = ivec3(gl_GlobalInvocationID.xyz); 

    vec2 faceUV = vec2(pos.xy) / vec2(imageSize(u_DestCube));
    vec3 dir = normalize(UnprojectCubemap(faceUV, gl_GlobalInvocationID.z));
    vec2 sourceUV = vec2(atan(dir.z, dir.x) / TAU, asin(dir.y) / PI) + 0.5;

    imageStore(u_DestCube, pos, texture(u_SourceImage, sourceUV));
}