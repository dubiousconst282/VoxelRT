uniform mat4 u_InvProjMat;
uniform mat4 u_ProjMat;
uniform int u_FrameNo;

uniform int u_DebugView;

const uint MAX_BOUNCES = 2;

#include "VoxelMap.glsl"
#include "VoxelTraversal.glsl"

#include "RandomGen.glsl"
#include "GBuffer.glsl"

vec3 getSkyColor(vec3 dir) {
    return vec3(0.8, 0.9, 0.96) * 3.0;
}

layout(local_size_x = 8, local_size_y = 8) in;
void main() {
    random_init(uvec3(gl_GlobalInvocationID.xy, u_FrameNo));

    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = vec2(pos + 0.5) / imageSize(u_GBuffer);

    vec3 rayDir, rayPos;
    getPrimaryRay(uv, u_InvProjMat, rayPos, rayDir);
    
    GSample gs;
    HitInfo hit;

    if (u_DebugView != 0) {
        // None, Albedo, Normals, TraversalIters
        rayTrace(rayPos, rayDir, hit);
        gs.albedo = u_DebugView == 1 ? getMaterialColor(hit.mat) : 
                    u_DebugView == 2 ? hit.normal * 0.5 + 0.5 :
                    u_DebugView == 3 ? vec3(hit.iters)/96.0 : vec3(1, 0, 1);
        gs.irradiance = vec3(1.0);
        gbufferStore(pos, gs);
        return;
    }
    
    if (rayTrace(rayPos, rayDir, hit)) {
        gs.albedo = getMaterialColor(hit.mat);
        gs.normal = hit.normal;
        gs.depth = hit.dist;

        vec3 color = vec3(MAX_BOUNCES == 0 ? 1.0 : 0.0);
        vec3 throughput = vec3(1.0);
        color += gs.albedo * getMaterialEmission(hit.mat);

        for (int i = 0; i < MAX_BOUNCES; i++) {
            rayPos = hit.pos + hit.normal * 0.01;

            float fuzziness = getMaterialMetalFuzziness(hit.mat);
            if (fuzziness < 1.0) {
                rayDir = normalize(reflect(rayDir, hit.normal) + (fuzziness * random_dir(i)));
                if (dot(rayDir, hit.normal) <= 0.0) break;
            } else {
                rayDir = normalize(hit.normal + random_dir(i));
            }

            if (!rayTraceCoarse(rayPos, rayDir, hit)) {
                color += throughput * getSkyColor(rayDir);
                break;
            }
            throughput *= getMaterialColor(hit.mat);
            color += throughput * getMaterialEmission(hit.mat);
        }
        gs.irradiance = color;
    } else {
        gs.albedo = getSkyColor(rayDir);
        gs.irradiance = vec3(1.0);
    }
    gbufferStore(pos, gs);
}