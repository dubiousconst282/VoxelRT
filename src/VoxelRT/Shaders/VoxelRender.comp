uniform mat4 u_InvProjMat;
uniform mat4 u_ProjMat;
uniform int u_FrameNo;

uniform samplerCube u_SkyTexture;

uniform int u_MaxBounces;

#include "VoxelMap.glsl"
#include "VoxelTraversal.glsl"

#include "RandomGen.glsl"
#include "GBuffer.glsl"

vec3 getSkyColor(vec3 dir) {
    return min(texture(u_SkyTexture, dir).rgb * 5, 50000);
}
uniform vec3 u_OriginFrac;

void getPrimaryRay(ivec2 screenPos, out vec3 rayPos, out vec3 rayDir) {
    vec4 near = u_InvProjMat * vec4(screenPos, 0.0, 1.0);
    vec4 far = near + u_InvProjMat[2];
    rayPos = vec3(near * (1.0 / near.w)) + u_OriginFrac;
    rayDir = normalize(vec3(far * (1.0 / far.w)));
}

layout(local_size_x = 8, local_size_y = 8) in;
void main() {
    random_init(uvec3(gl_GlobalInvocationID.xy, u_FrameNo));
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);

    vec3 rayDir, rayPos;
    getPrimaryRay(pos, rayPos, rayDir);
    
    vec3 albedo, irradiance, normal;
    float depth = -1.0;
    HitInfo hit;

    if (rayCast(rayPos, rayDir, hit)) {
        albedo = getMaterialColor(hit.mat);
        normal = hit.normal;

        vec4 projPos = u_ProjMat * vec4(hit.pos / 16.0, 1.0); // scale down by 1/16 to minimize precision loss
        depth = projPos.z / projPos.w;

        irradiance = albedo * getMaterialEmission(hit.mat);
        vec3 throughput = vec3(1.0);

        if (u_MaxBounces == 0) irradiance = albedo;

        const vec3 sunDir = normalize(vec3(0.3,0.9,-0.28));
        const float sunIntensity = 5;
    
        HitInfo sunHit;
        if (!rayCastCoarse(hit.pos + hit.normal*0.01, sunDir, sunHit)) {
            irradiance += vec3(1.2,1.1,1.0)*sunIntensity;
        } else {
            throughput *= 0.5;
        }
        
        for (int i = 0; i < u_MaxBounces; i++) {
            rayPos = hit.pos + hit.normal * 0.01;

            /*float fuzziness = getMaterialMetalFuzziness(hit.mat);
            if (fuzziness < 1.0) {
                rayDir = normalize(reflect(rayDir, hit.normal) + (fuzziness * random_dir(u_FrameNo, i)));
                if (dot(rayDir, hit.normal) <= 0.0) break;
            } else */{
                rayDir = normalize(hit.normal + random_dir(u_FrameNo, i));
            }

            if (!rayCastCoarse(rayPos, rayDir, hit)) {
                irradiance += throughput * getSkyColor(rayDir);
                break;
            }
            throughput *= getMaterialColor(hit.mat);
            float emission = getMaterialEmission(hit.mat);
            
            if (i < 2 && !rayCastCoarse(hit.pos + hit.normal*0.01, sunDir, sunHit)) {
                throughput *= vec3(1.2,1.1,1.0)*sunIntensity;
                emission += sunIntensity;
            }
            irradiance += throughput * emission;
        }
    } else {
        irradiance = getSkyColor(rayDir);
        albedo = vec3(1.0);
    }
    imageStore(u_AlbedoNormalTex, pos, vec4(albedo, float(packGNormal(normal))));
    imageStore(u_IrradianceTex, pos, vec4(irradiance, hit.iters));
    imageStore(u_DepthTex, pos, vec4(depth));
}